# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from argo_workflows.models.artifactory_artifact import ArtifactoryArtifact
from argo_workflows.models.azure_artifact import AzureArtifact
from argo_workflows.models.gcs_artifact import GCSArtifact
from argo_workflows.models.git_artifact import GitArtifact
from argo_workflows.models.hdfs_artifact import HDFSArtifact
from argo_workflows.models.http_artifact import HTTPArtifact
from argo_workflows.models.oss_artifact import OSSArtifact
from argo_workflows.models.raw_artifact import RawArtifact
from argo_workflows.models.s3_artifact import S3Artifact
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ArtifactLocation(BaseModel):
    """
    ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.
    """ # noqa: E501
    archive_logs: Optional[StrictBool] = Field(default=None, description="ArchiveLogs indicates if the container logs should be archived", alias="archiveLogs")
    artifactory: Optional[ArtifactoryArtifact] = None
    azure: Optional[AzureArtifact] = None
    gcs: Optional[GCSArtifact] = None
    git: Optional[GitArtifact] = None
    hdfs: Optional[HDFSArtifact] = None
    http: Optional[HTTPArtifact] = None
    oss: Optional[OSSArtifact] = None
    raw: Optional[RawArtifact] = None
    s3: Optional[S3Artifact] = None
    __properties: ClassVar[List[str]] = ["archiveLogs", "artifactory", "azure", "gcs", "git", "hdfs", "http", "oss", "raw", "s3"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ArtifactLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifactory
        if self.artifactory:
            _dict['artifactory'] = self.artifactory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure
        if self.azure:
            _dict['azure'] = self.azure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs
        if self.gcs:
            _dict['gcs'] = self.gcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdfs
        if self.hdfs:
            _dict['hdfs'] = self.hdfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http:
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oss
        if self.oss:
            _dict['oss'] = self.oss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw
        if self.raw:
            _dict['raw'] = self.raw.to_dict()
        # override the default output from pydantic by calling `to_dict()` of s3
        if self.s3:
            _dict['s3'] = self.s3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ArtifactLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveLogs": obj.get("archiveLogs"),
            "artifactory": ArtifactoryArtifact.from_dict(obj.get("artifactory")) if obj.get("artifactory") is not None else None,
            "azure": AzureArtifact.from_dict(obj.get("azure")) if obj.get("azure") is not None else None,
            "gcs": GCSArtifact.from_dict(obj.get("gcs")) if obj.get("gcs") is not None else None,
            "git": GitArtifact.from_dict(obj.get("git")) if obj.get("git") is not None else None,
            "hdfs": HDFSArtifact.from_dict(obj.get("hdfs")) if obj.get("hdfs") is not None else None,
            "http": HTTPArtifact.from_dict(obj.get("http")) if obj.get("http") is not None else None,
            "oss": OSSArtifact.from_dict(obj.get("oss")) if obj.get("oss") is not None else None,
            "raw": RawArtifact.from_dict(obj.get("raw")) if obj.get("raw") is not None else None,
            "s3": S3Artifact.from_dict(obj.get("s3")) if obj.get("s3") is not None else None
        })
        return _obj


