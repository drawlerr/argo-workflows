# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from argo_workflows.models.manifest_from import ManifestFrom
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ResourceTemplate(BaseModel):
    """
    ResourceTemplate is a template subtype to manipulate kubernetes resources
    """ # noqa: E501
    action: StrictStr = Field(description="Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch")
    failure_condition: Optional[StrictStr] = Field(default=None, description="FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed", alias="failureCondition")
    flags: Optional[List[StrictStr]] = Field(default=None, description="Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [  \"--validate=false\"  # disable resource validation ]")
    manifest: Optional[StrictStr] = Field(default=None, description="Manifest contains the kubernetes manifest")
    manifest_from: Optional[ManifestFrom] = Field(default=None, alias="manifestFrom")
    merge_strategy: Optional[StrictStr] = Field(default=None, description="MergeStrategy is the strategy used to merge a patch. It defaults to \"strategic\" Must be one of: strategic, merge, json", alias="mergeStrategy")
    set_owner_reference: Optional[StrictBool] = Field(default=None, description="SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.", alias="setOwnerReference")
    success_condition: Optional[StrictStr] = Field(default=None, description="SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step", alias="successCondition")
    __properties: ClassVar[List[str]] = ["action", "failureCondition", "flags", "manifest", "manifestFrom", "mergeStrategy", "setOwnerReference", "successCondition"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ResourceTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of manifest_from
        if self.manifest_from:
            _dict['manifestFrom'] = self.manifest_from.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ResourceTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "failureCondition": obj.get("failureCondition"),
            "flags": obj.get("flags"),
            "manifest": obj.get("manifest"),
            "manifestFrom": ManifestFrom.from_dict(obj.get("manifestFrom")) if obj.get("manifestFrom") is not None else None,
            "mergeStrategy": obj.get("mergeStrategy"),
            "setOwnerReference": obj.get("setOwnerReference"),
            "successCondition": obj.get("successCondition")
        })
        return _obj


