# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from argo_workflows.models.event_persistence import EventPersistence
from argo_workflows.models.event_source_filter import EventSourceFilter
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CalendarEventSource(BaseModel):
    """
    CalendarEventSource
    """ # noqa: E501
    exclusion_dates: Optional[List[StrictStr]] = Field(default=None, description="ExclusionDates defines the list of DATE-TIME exceptions for recurring events.", alias="exclusionDates")
    filter: Optional[EventSourceFilter] = None
    interval: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    persistence: Optional[EventPersistence] = None
    schedule: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["exclusionDates", "filter", "interval", "metadata", "persistence", "schedule", "timezone"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CalendarEventSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persistence
        if self.persistence:
            _dict['persistence'] = self.persistence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CalendarEventSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclusionDates": obj.get("exclusionDates"),
            "filter": EventSourceFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "interval": obj.get("interval"),
            "metadata": obj.get("metadata"),
            "persistence": EventPersistence.from_dict(obj.get("persistence")) if obj.get("persistence") is not None else None,
            "schedule": obj.get("schedule"),
            "timezone": obj.get("timezone")
        })
        return _obj


