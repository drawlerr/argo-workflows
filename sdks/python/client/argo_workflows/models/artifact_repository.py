# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
from argo_workflows.models.artifactory_artifact_repository import ArtifactoryArtifactRepository
from argo_workflows.models.azure_artifact_repository import AzureArtifactRepository
from argo_workflows.models.gcs_artifact_repository import GCSArtifactRepository
from argo_workflows.models.hdfs_artifact_repository import HDFSArtifactRepository
from argo_workflows.models.oss_artifact_repository import OSSArtifactRepository
from argo_workflows.models.s3_artifact_repository import S3ArtifactRepository
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ArtifactRepository(BaseModel):
    """
    ArtifactRepository represents an artifact repository in which a controller will store its artifacts
    """ # noqa: E501
    archive_logs: Optional[StrictBool] = Field(default=None, description="ArchiveLogs enables log archiving", alias="archiveLogs")
    artifactory: Optional[ArtifactoryArtifactRepository] = None
    azure: Optional[AzureArtifactRepository] = None
    gcs: Optional[GCSArtifactRepository] = None
    hdfs: Optional[HDFSArtifactRepository] = None
    oss: Optional[OSSArtifactRepository] = None
    s3: Optional[S3ArtifactRepository] = None
    __properties: ClassVar[List[str]] = ["archiveLogs", "artifactory", "azure", "gcs", "hdfs", "oss", "s3"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ArtifactRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifactory
        if self.artifactory:
            _dict['artifactory'] = self.artifactory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure
        if self.azure:
            _dict['azure'] = self.azure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs
        if self.gcs:
            _dict['gcs'] = self.gcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdfs
        if self.hdfs:
            _dict['hdfs'] = self.hdfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oss
        if self.oss:
            _dict['oss'] = self.oss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of s3
        if self.s3:
            _dict['s3'] = self.s3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ArtifactRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveLogs": obj.get("archiveLogs"),
            "artifactory": ArtifactoryArtifactRepository.from_dict(obj.get("artifactory")) if obj.get("artifactory") is not None else None,
            "azure": AzureArtifactRepository.from_dict(obj.get("azure")) if obj.get("azure") is not None else None,
            "gcs": GCSArtifactRepository.from_dict(obj.get("gcs")) if obj.get("gcs") is not None else None,
            "hdfs": HDFSArtifactRepository.from_dict(obj.get("hdfs")) if obj.get("hdfs") is not None else None,
            "oss": OSSArtifactRepository.from_dict(obj.get("oss")) if obj.get("oss") is not None else None,
            "s3": S3ArtifactRepository.from_dict(obj.get("s3")) if obj.get("s3") is not None else None
        })
        return _obj


