# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from argo_workflows.models.argo_workflow_trigger import ArgoWorkflowTrigger
from argo_workflows.models.aws_lambda_trigger import AWSLambdaTrigger
from argo_workflows.models.azure_event_hubs_trigger import AzureEventHubsTrigger
from argo_workflows.models.conditions_reset_criteria import ConditionsResetCriteria
from argo_workflows.models.custom_trigger import CustomTrigger
from argo_workflows.models.http_trigger import HTTPTrigger
from argo_workflows.models.kafka_trigger import KafkaTrigger
from argo_workflows.models.log_trigger import LogTrigger
from argo_workflows.models.nats_trigger import NATSTrigger
from argo_workflows.models.open_whisk_trigger import OpenWhiskTrigger
from argo_workflows.models.pulsar_trigger import PulsarTrigger
from argo_workflows.models.slack_trigger import SlackTrigger
from argo_workflows.models.standard_k8_s_trigger import StandardK8STrigger
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TriggerTemplate(BaseModel):
    """
    TriggerTemplate is the template that describes trigger specification.
    """ # noqa: E501
    argo_workflow: Optional[ArgoWorkflowTrigger] = Field(default=None, alias="argoWorkflow")
    aws_lambda: Optional[AWSLambdaTrigger] = Field(default=None, alias="awsLambda")
    azure_event_hubs: Optional[AzureEventHubsTrigger] = Field(default=None, alias="azureEventHubs")
    conditions: Optional[StrictStr] = None
    conditions_reset: Optional[List[ConditionsResetCriteria]] = Field(default=None, alias="conditionsReset")
    custom: Optional[CustomTrigger] = None
    http: Optional[HTTPTrigger] = None
    k8s: Optional[StandardK8STrigger] = None
    kafka: Optional[KafkaTrigger] = None
    log: Optional[LogTrigger] = None
    name: Optional[StrictStr] = Field(default=None, description="Name is a unique name of the action to take.")
    nats: Optional[NATSTrigger] = None
    open_whisk: Optional[OpenWhiskTrigger] = Field(default=None, alias="openWhisk")
    pulsar: Optional[PulsarTrigger] = None
    slack: Optional[SlackTrigger] = None
    __properties: ClassVar[List[str]] = ["argoWorkflow", "awsLambda", "azureEventHubs", "conditions", "conditionsReset", "custom", "http", "k8s", "kafka", "log", "name", "nats", "openWhisk", "pulsar", "slack"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TriggerTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of argo_workflow
        if self.argo_workflow:
            _dict['argoWorkflow'] = self.argo_workflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_lambda
        if self.aws_lambda:
            _dict['awsLambda'] = self.aws_lambda.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_event_hubs
        if self.azure_event_hubs:
            _dict['azureEventHubs'] = self.azure_event_hubs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditions_reset (list)
        _items = []
        if self.conditions_reset:
            for _item in self.conditions_reset:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditionsReset'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['custom'] = self.custom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http:
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k8s
        if self.k8s:
            _dict['k8s'] = self.k8s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kafka
        if self.kafka:
            _dict['kafka'] = self.kafka.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict['log'] = self.log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nats
        if self.nats:
            _dict['nats'] = self.nats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_whisk
        if self.open_whisk:
            _dict['openWhisk'] = self.open_whisk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pulsar
        if self.pulsar:
            _dict['pulsar'] = self.pulsar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack
        if self.slack:
            _dict['slack'] = self.slack.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TriggerTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "argoWorkflow": ArgoWorkflowTrigger.from_dict(obj.get("argoWorkflow")) if obj.get("argoWorkflow") is not None else None,
            "awsLambda": AWSLambdaTrigger.from_dict(obj.get("awsLambda")) if obj.get("awsLambda") is not None else None,
            "azureEventHubs": AzureEventHubsTrigger.from_dict(obj.get("azureEventHubs")) if obj.get("azureEventHubs") is not None else None,
            "conditions": obj.get("conditions"),
            "conditionsReset": [ConditionsResetCriteria.from_dict(_item) for _item in obj.get("conditionsReset")] if obj.get("conditionsReset") is not None else None,
            "custom": CustomTrigger.from_dict(obj.get("custom")) if obj.get("custom") is not None else None,
            "http": HTTPTrigger.from_dict(obj.get("http")) if obj.get("http") is not None else None,
            "k8s": StandardK8STrigger.from_dict(obj.get("k8s")) if obj.get("k8s") is not None else None,
            "kafka": KafkaTrigger.from_dict(obj.get("kafka")) if obj.get("kafka") is not None else None,
            "log": LogTrigger.from_dict(obj.get("log")) if obj.get("log") is not None else None,
            "name": obj.get("name"),
            "nats": NATSTrigger.from_dict(obj.get("nats")) if obj.get("nats") is not None else None,
            "openWhisk": OpenWhiskTrigger.from_dict(obj.get("openWhisk")) if obj.get("openWhisk") is not None else None,
            "pulsar": PulsarTrigger.from_dict(obj.get("pulsar")) if obj.get("pulsar") is not None else None,
            "slack": SlackTrigger.from_dict(obj.get("slack")) if obj.get("slack") is not None else None
        })
        return _obj


